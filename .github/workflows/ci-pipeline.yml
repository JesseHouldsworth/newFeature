# GitHub Actions Workflow Name
name: Build, Scan, and Sign with JFrog

# Triggers for the workflow
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches: [ "main" ]

# Define environment variables for reusable values
env:
  # Define the build name (used across multiple steps)
  JFROG_BUILD_NAME: newFeature
  # Define the Java version
  JAVA_VERSION: '17'
  # Define the Java distribution
  JAVA_DISTRIBUTION: 'temurin'
  # Define the Maven repositories (replace if different)
  MAVEN_DEV_VIRTUAL_REPO: newFeature-maven-dev-virtual
  MAVEN_DEV_LOCAL_REPO: newFeature-maven-dev-local

jobs:
  build-scan-sign: # Renamed job for clarity
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Code: Get the source code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up JDK: Install the specified Java version
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      # 3. Setup JFrog CLI: Install and configure JFrog CLI
      #    Secrets provide authentication details
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          # JFrog Platform URL (e.g., https://your-org.jfrog.io)
          JF_URL: ${{ secrets.JF_RT_URL }}
          # JFrog Platform Username or Access Token User
          JF_USER: ${{ secrets.ARTIFACTORY_USERNAME }}
          # JFrog Platform Password or Identity Token
          JF_PASSWORD: ${{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
          # GitHub Token (used by build-add-git)
          JF_GIT_TOKEN: ${{ secrets.GH_TOKEN }}
          # Set JFrog CLI environment variables for build name/number
          JFROG_CLI_BUILD_NAME: ${{ env.JFROG_BUILD_NAME }}
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}

      # 4. Clean local Maven cache (Optional but can prevent issues)
      - name: Clear local Maven cache
        run: rm -rf ~/.m2/repository

      # 5. Verify JFrog connection (Renumbered)
      - name: Ping JFrog Connection
        run: jf rt ping

      # 6. Configure Maven Repositories (Renumbered)
      #    Tells JFrog CLI which Artifactory repos Maven should use
      - name: Configure Maven Repositories with JFrog CLI
        run: |
          jf mvnc --global \
            --repo-resolve-releases ${{ env.MAVEN_DEV_VIRTUAL_REPO }} \
            --repo-resolve-snapshots ${{ env.MAVEN_DEV_VIRTUAL_REPO }} \
            --repo-deploy-releases ${{ env.MAVEN_DEV_LOCAL_REPO }} \
            --repo-deploy-snapshots ${{ env.MAVEN_DEV_LOCAL_REPO }}

      # 7. Build and Deploy with Maven using JFrog CLI (Renumbered)
      #    Compiles, packages, and deploys the artifact, collecting build info
      - name: Maven Build & Deploy With JFrog CLI
        run: |
          jf mvn clean deploy -DskipTests=true -Denforcer.skip=true \
            --build-name="${{ env.JFROG_BUILD_NAME }}" \
            --build-number="${{ github.run_number }}"

      # 8. Publish Build Information (Renumbered and combined steps)
      #    Collects environment variables, Git info, and publishes the build record to Artifactory
      - name: Publish Build Info
        run: |
          echo "Collecting environment variables..."
          jf rt build-collect-env "${{ env.JFROG_BUILD_NAME }}" "${{ github.run_number }}"
          echo "Adding Git information..."
          jf rt build-add-git "${{ env.JFROG_BUILD_NAME }}" "${{ github.run_number }}"
          echo "Publishing build info..."
          jf rt build-publish "${{ env.JFROG_BUILD_NAME }}" "${{ github.run_number }}"

      # 9. Scan Published Build with Xray (Renumbered)
      #    Triggers an Xray scan on the published build artifacts
      - name: Scan Published Build with Xray (fail on policy)
        if: success() # Only run if previous steps succeeded
        run: |
          echo "Scanning build ${{ env.JFROG_BUILD_NAME }}/${{ github.run_number }} with Xray..."
          jf bs "${{ env.JFROG_BUILD_NAME }}" "${{ github.run_number }}" --fail=true

      # 10. Create Evidence Signature for the Build (NEW STEP)
      #     Uses the configured GPG key to sign the build info, creating evidence
      - name: Create Build Signature Evidence
        if: success() # Only run if previous steps succeeded
        env:
          # Provide the GPG passphrase via environment variable
          JFROG_CLI_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "Creating signature evidence for build ${{ env.JFROG_BUILD_NAME }}/${{ github.run_number }}..."
          jf evd create \
            --build-name "${{ env.JFROG_BUILD_NAME }}" \
            --build-number "${{ github.run_number }}" \
            --key "${{ secrets.GPG_PRIVATE_KEY }}" \
            --key-alias "${{ secrets.GPG_KEY_ALIAS }}" \
            --predicate-type https://jfrog.com/evidence/signature/v1